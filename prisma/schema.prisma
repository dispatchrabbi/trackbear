// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client"
  previewFeatures = ["queryCompiler", "driverAdapters"]
  output          = "../generated/prisma"
  moduleFormat    = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @db.Timestamptz(3)
}

model AuditEvent {
  id Int @id @default(autoincrement())

  // the lack of relations here is on purpose
  agentId   Int
  patientId Int?
  goalId    Int?

  eventType String
  auxInfo   String
  sessionId String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3) // this should never differ from createdAt
}

model User {
  id    Int    @id @default(autoincrement())
  uuid  String @unique @default(uuid())
  state String

  username    String  @unique
  displayName String
  avatar      String?

  email           String
  isEmailVerified Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  userAuth    UserAuth?
  apiKeys     ApiKey[]
  
  adminPerms AdminPerms?
  
  userSettings UserSettings?

  passwordResetLinks        PasswordResetLink[]
  pendingEmailVerifications PendingEmailVerification[]
  tallies                   Tally[]
  works                     Work[]
  tags                      Tag[]
  goals                     Goal[]
  boards                    Board[]
  boardParticipants         BoardParticipant[]
}

model UserAuth {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  password String
  salt     String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model ApiKey {
  id    Int @id @default(autoincrement())
  
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int

  name      String
  token     String @unique
  expiresAt DateTime? @db.Timestamptz(3)
  lastUsed  DateTime? @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model AdminPerms {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  isAdmin Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model UserSettings {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  lifetimeStartingBalance Json @default("{}")
  enablePublicProfile Boolean @default(false)
  displayCovers Boolean @default(true)
  displayStreaks Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model PendingEmailVerification {
  uuid String @id @default(uuid())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  newEmail  String
  expiresAt DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model PasswordResetLink {
  uuid String @id @default(uuid())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  state     String
  expiresAt DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Banner {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  enabled   Boolean
  showUntil DateTime @db.Timestamptz(3)

  message String
  color   String @default("info")
  icon    String @default("campaign")

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Tally {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  date    String
  measure String
  count   Int
  note    String

  workId Int?
  work   Work? @relation(fields: [workId], references: [id], onDelete: Cascade)

  tags Tag[]
}

model Work {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  title       String
  description String
  phase       String
  cover       String?

  startingBalance Json @default("{}")

  starred Boolean @default(false)
  displayOnProfile Boolean @default(false)

  tallies           Tally[]
  goals             Goal[]
  boardParticipants BoardParticipant[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name  String
  color String

  tallies           Tally[]
  goals             Goal[]
  boardParticipants BoardParticipant[]

  @@unique([ownerId, name])
}

model Goal {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  title       String
  description String

  type       String
  parameters Json

  startDate String?
  endDate   String?

  starred Boolean @default(false)
  displayOnProfile Boolean @default(false)

  worksIncluded Work[]
  tagsIncluded  Tag[]
}

model Board {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  title       String
  description String
  measures    String[]

  startDate String?
  endDate   String?
  goal      Json
  individualGoalMode  Boolean @default(false)
  fundraiserMode  Boolean @default(false)

  starred Boolean @default(false)

  isJoinable   Boolean            @default(false)
  isPublic     Boolean            @default(false)
  participants BoardParticipant[]
}

model BoardParticipant {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  starred Boolean @default(false)
  isParticipant Boolean @default(true)
  isOwner Boolean @default(false)

  worksIncluded Work[]
  tagsIncluded  Tag[]

  goal Json?

  @@unique([userId, boardId])
}
