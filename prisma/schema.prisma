// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DB_APP_DB_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------------------------------
// These models are for general system functioning

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @db.Timestamptz(3)
}

model AuditEvent {
  id Int @id @default(autoincrement())

  // the lack of relations here is on purpose
  agentId   Int
  patientId Int?
  goalId    Int?

  eventType String
  auxInfo   String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3) // this should never differ from createdAt
}

model User {
  id    Int    @id @default(autoincrement())
  uuid  String @unique @default(uuid())
  state String

  username    String @unique
  displayName String

  email           String
  isEmailVerified Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  projects                  Project[]
  leaderboards              Leaderboard[]
  userAuth                  UserAuth?
  passwordResetLinks        PasswordResetLink[]
  pendingEmailVerifications PendingEmailVerification[]
  Tally                     Tally[]
  Work                      Work[]
  Tag                       Tag[]
}

model UserAuth {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  password String
  salt     String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model PendingEmailVerification {
  uuid String @id @default(uuid())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  newEmail  String
  expiresAt DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model PasswordResetLink {
  uuid String @id @default(uuid())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  state     String
  expiresAt DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Banner {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  enabled   Boolean
  showUntil DateTime @db.Timestamptz(3)

  message String
  color   String @default("info")
  icon    String @default("campaign")

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

// ----------------------------------------------------------------------------
// These models are for the tag-and-tally idiom

model Tally {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  date    String
  measure String
  count   Int
  note    String

  workId Int?
  work   Work? @relation(fields: [workId], references: [id], onDelete: Cascade)

  tags Tag[]
}

model Work {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  title       String
  description String
  phase      String

  tallies       Tally[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  state     String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name  String
  color String

  talies Tally[]

  @@unique([ ownerId, name ])
}

// Board and Participant are not yet implemented
// model Board {
//   id   Int    @id @default(autoincrement())
//   uuid String @unique @default(uuid())
//   state String
//   createdAt DateTime @db.Timestamptz(3) @default(now())
//   updatedAt DateTime @db.Timestamptz(3) @updatedAt

//   ownerId Int
//   owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

//   title String
//   description String
//   starred Boolean
//   visibility String

//   parameters Json

//   joinability String
//   participants Participant[]
// }

// model Participant {
//   id   Int    @id @default(autoincrement())
//   uuid String @unique @default(uuid())
//   state String
//   createdAt DateTime @db.Timestamptz(3) @default(now())
//   updatedAt DateTime @db.Timestamptz(3) @updatedAt

//   userId Int
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   boardId Int
//   board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

//   role String
//   parameters Json
// }

// ----------------------------------------------------------------------------
// These models are for the LEGACY updates-in-projects idiom

model Project {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int

  title String
  type  String
  state String

  goal      Int?
  startDate String?
  endDate   String?

  visibility String
  starred    Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  updates      Update[]
  leaderboards Leaderboard[]
}

model Update {
  id Int @id @default(autoincrement())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  date  String
  value Int

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Leaderboard {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int

  title String
  type  String
  state String

  goal      Int?
  startDate String?
  endDate   String?

  projects Project[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}
